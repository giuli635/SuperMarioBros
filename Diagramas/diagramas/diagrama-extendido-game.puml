@startuml
class CollisionsEngine {
   #{static} uniqueInstance: CollisionsEngine
   #chunks: List<List<Collider>>
   #toUpdate: Set<Collider>
   +CollisionsEngine()
   +{static}instance(): CollisionsEngine 
   #checkCollision(c1: Collider, c2: Collider, axis: Axis)
   +update()
   +checkCollisions(collidersToCheck: Iterable<Collider>, axis: Axis)
   #calculateChunk(minX: int, maxX: int): int[] 
   #calculateChunk(collider: Collider): int[] 
   +add(collider: Collider)
   +remove(item: Collider)
   +getCollidersInRange(lowerBound: int, higherBound: int): Iterable<Collider> 
   +addToUpdate(c: Collider)
}

class Game {
   #{static} SECOND: int
   #{static} FPS: int
   #{static} uniqueInstance: Game
   #toUpdateRegistry: Set<UpdatableEntity>
   #keysStatus: Map<Integer, KeyStatus>
   #currLevel: Level
   #mario: Mario
   #run: boolean
   #pause: boolean
   -boolean pauseKeyAlreadyPressed = false 
   -Game()
   +{static}instance(): Game 
   +registerToUpdate(e: UpdatableEntity)
   +unregisterToUpdate(e: UpdatableEntity)
   +getKeyStatus(key: int): KeyStatus 
   -loop()
   +{static} main(args: String[])
   +windowActivated(e: WindowEvent)
   +windowClosed(e: WindowEvent)
   +windowClosing(e: WindowEvent)
   +windowDeactivated(e: WindowEvent)
   +windowDeiconified(e: WindowEvent)
   +windowIconified(e: WindowEvent)
   +windowOpened(e: WindowEvent)
   +keyPressed(arg0: KeyEvent)
   +keyReleased(arg0: KeyEvent)
   +keyTyped(arg0: KeyEvent)
   +checkPause()
}

class GraphicEngine {
   #{static} uniqueInstance: GraphicEngine
   #frame: JFrame
   #panel: JPanel
   #onScreen: Set<GraphicElement>
   #position: int
   +getPosition(): int 
   +setPosition(x: int)
   +translate(dx: int)
   -GraphicEngine()
   +{static}instance(): GraphicEngine 
   +drawFrame()
   +addGraphicElement(e: GraphicElement)
   +removeGraphicElement(e: GraphicElement)
   +getPanelSize(): Dimension 
   +scrollScreen(velocity: int) {  
}

enum KeyStatus {
}

class Level {
   #time: Duration
   #points: int
   #background: Image
   +Level(t: Duration)
   +getPoints(): int 
   +addPoints(p: int)
   +substractPoints(p: int)
}

class LevelReader  {
   #{static} CHUNK: int
   #{static} uniqueInstance: LevelReader
   #loaders: Map<Character, EntityLoader>
   -LevelReader()
   #{static}instance(): LevelReader 
   +createLevel(file: String): Level 
   -loadScreen()
   +loadEntities(br: BufferedReader)
}

@enduml
