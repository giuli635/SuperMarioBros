@startuml
class Game <<Singleton>> {
    #{static} SECOND: int
    #{static} FPS: int
    #keysStatus: Map<Integer, KeyStatus>
    #{static} uniqueInstance: Game
    #toUpdateRegistry: Set<Entity>
    #currLevel: Level
    #mario: Mario
    #run: boolean
    +{static} instance(): Game
    #loadLevel()
    +registerToUpdate(e: Entity)
    +unregisterToUpdate(e: Entity)
    +getKeyStatus(int key): KeyStatus
    +getKeyPressed(key: int): boolean
    +getKeyReleased(key: int): boolean
    +scrollScreen()
    +{static} main(String[] args)
}


class Level{
    #time: Duration
    #points: int
    #Background: Image
    +Level(time: Duration)
    +getPoints(): int
    +addPoints(p: int)
    +substractPoints(p: int)
}
note left of Level::time
Duration es la clase de Java
end note
class LevelReader <<Singleton>>{
    #{static} CHUNK: int
    #{static} uniqueInstance: LevelReader
    #prototypes: Map<Character,Entity>
    #generalPrototype: GameEntity
    #marioPrototype: Mario
    #Instance(): LevelReader
    +CreateLevel(file: String):Level
    -loadScreen()
    +loadEntities(br: BufferedReader)

}

class Menu <<Singleton>> {
    #{static} uniqueInstance: Menu
    +{static} instance(): Menu
    +selectMode(modo: int)
    +showModes()
    +showRanking()
    ' TODO: implementar la UI del menu
}

class Ranking <<Singleton>> {
    #rank: Map<String, Integer>
    #{static} uniqueInstance: Ranking
    +{static} instance(): Ranking
    +addEntry(player: String, points: int)
    +getRanking(): Iterable<Entry<String, Integer>>
}

enum KeyStatus{
    Pressed
    Released
}
@enduml
