@startuml
class CollisionsEngine {
   #{static} uniqueInstance: CollisionsEngine
   #chunks: List<List<Collider>>
   #toUpdate: Set<Collider>
   #frame: int
   #CollisionsEngine()
   +{static}instance(): CollisionsEngine 
   #checkCollision(c1: Collider, c2: Collider, axis: Axis)
   +update()
   #checkCollisions(axis: Axis)
   #checkChunk(axis: Axis, collider: Collider, i: int)
   +updateColliderBounds(previousBounds: Rectangle, c: Collider)
   #calculateChunk(minX: int, maxX: int): int[] 
   #calculateChunk(bounds: Rectangle): int[] 
   +add(collider: Collider)
   #removeFromChunks(bounds: Rectangle, c: Collider)
   +remove(c: Collider)
   +getCollidersInRange(lowerBound: int, higherBound: int): Iterable<Collider> 
   +addToUpdate(c: Collider)
   +reset()
}

class Game {
   #{static} SECOND: int
   #{static} FPS: int
   #{static} uniqueInstance: Game
   #toUpdateRegistry: Set<UpdatableEntity>
   #keysStatus: Map<Integer, KeyStatus>
   #lvlStats: LevelStats
   #run: boolean
   #pause: boolean
   #pauseKeyAlreadyPressed: boolean
   #levels: String[]
   #currLevel: int
   #toAddList = new ArrayList<>(): List<UpdatableEntity> 
   #toRemoveList = new ArrayList<>(): List<UpdatableEntity> 
   #debugging: boolean
   #reset: boolean
   +isDebugging(): boolean 
   +setDebugging(debugging: boolean)
   -Game()
   +{static}instance(): Game 
   +registerToUpdate(e: UpdatableEntity)
   +unregisterToUpdate(e: UpdatableEntity)
   +getKeyStatus(key: int): KeyStatus 
   -loop()
   +{static} main(args: String[])
   +resetCurrentLevel()
   +advanceLevel()
   +getLevelStats(): LevelStats 
   +windowActivated(e: WindowEvent)
   +windowClosed(e: WindowEvent)
   +windowClosing(e: WindowEvent)
   +windowDeactivated(e: WindowEvent)
   +windowDeiconified(e: WindowEvent)
   +windowIconified(e: WindowEvent)
   +windowOpened(e: WindowEvent)
   +keyPressed(arg0: KeyEvent)
   +keyReleased(arg0: KeyEvent)
   +keyTyped(arg0: KeyEvent)
   +checkPause()
}

class GraphicEngine {
   #{static} uniqueInstance: GraphicEngine
   +{static} Integer: final
   +{static} Integer: final
   +{static} Integer: final
   #frame: JFrame
   #mode: String
   #panel: JLayeredPane
   #onScreen: Set<GraphicElement>
   #position: int
   #backgrounds: GameGraphicElement[]
   +getPosition(): int 
   +setPosition(x: int)
   +translate(dx: int)
   -GraphicEngine()
   +initBackgrounds()
   +{static}instance(): GraphicEngine 
   +drawFrame()
   +add(e: GraphicElement)
   +remove(e: GraphicElement)
   +getPanelSize(): Dimension 
   +scrollScreen(velocity: int) {  
   +moveToBack(e: GraphicElement)
   +moveToFront(e: GraphicElement)
   +setDepth(e: GraphicElement, depth: Integer)
   +setMode(s: String)
   +getMode(): String 
   +reset()
}

enum KeyStatus {
}

class LevelReader {
   +{static} int: final
   #{static} uniqueInstance: LevelReader
   #loaders: Map<Character, EntityLoader>
   #{static} loadingStartingPoint: int
   #column: int
   #row: int
   #chunk: String
   -LevelReader()
   #{static}instance(): LevelReader 
   +createLevel(livesMario: int, levelTimer: int, numberLevel: int, score: int): LevelStats 
   +readTxt(file: String)
   -loadScreen()
   +loadEntities(br: BufferedReader)
   +setColumn(i: int)
   +getColumn(): int 
   +setRow(i: int)
   +getRow(): int 
   +setChunk(s: String)
   +getChunk(): String 
}

class LevelStats {
   #remainingTime: int
   #score: int
   #lives: int
   #levelNumber: int
   #levelTimer: LevelTimer
   #observers: List<LevelStatsObserver>
   #soundManager: SoundManager
   +LevelStats(initialTime: int, initialLives: int, numberLevel: int, scoreLevel: int)
   +addObserver(observer: LevelStatsObserver)
   #notifyObserver()
   +pauseAllSounds()
   +resumeAllSounds()
   +pauseTimer()
   +resumeTimer()
   +decreaseLives()
   +addPoints(points: int)
   +subtractPoints(p: int)
   +getLives() { : int 
   +getScore() { : int 
   +getRemainingTime() { : int 
   +getLevelTimer(): LevelTimer 
   +getLevelNumber(): int 
   +getSoundManager(): SoundManager 
}

interface LevelStatsObserver {
}

class LevelTimer {
   #remainingTime: int
   #timer: Timer
   #isPaused: boolean
   +LevelTimer(seconds: int)
   +getRemainingTime(): int 
   #startTimer()
   +pauseTimer()
   +resumeTimer()
   +stopTimer()
}package game;

class SoundManager {
   -clips: Map<String, Clip>
   -soundPath: String
   +SoundManager()
   +playSound(soundFile: String)
   +playLoopingSound(soundFile: String)
   +pauseAllSounds()
   +resumeAllSounds()
   +removeAllSounds()
}

@enduml
