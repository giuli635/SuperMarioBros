@startuml
Game -> Mario : update()
activate Mario
Game -> CollisionsEngine : checkCollisions()
activate CollisionsEngine
CollisionsEngine -> MarioCollider : collide(PowerUpCollider, Direction)
activate MarioCollider
CollisionsEngine -> PowerUpCollider : collide(MarioCollider, Direction)
activate PowerUpCollider
deactivate CollisionsEngine
MarioCollider -> PowerUpCollider : handleCollision(this, Direction)
PowerUpCollider -> MarioCollider : handleCollision(this, Direction)
deactivate MarioCollider
PowerUpCollider -> PowerUp : apply(Mario)
deactivate PowerUpCollider

activate PowerUp
alt PowerUp es SuperMushroom
    PowerUp -> Super : setState()
    activate Super
    Super -> Mario : addMarioState(Super)
    Super -> Mario : addEnemyCollision(SuperEnemyCollision)
    Super -> Mario : addBrickCollision(BreakBrickCollision)
    Super -> Game : registerToUpdate(Croucher)
    deactivate Super
else PowerUp es FireFlower
    PowerUp -> Fire : setState()
    activate Fire
    Fire -> Super : setState()
    activate Super
    Super -> Mario : addMarioState(Super)
    Super -> Mario : addEnemyCollision(SuperEnemyCollision)
    Super -> Mario : addBrickCollision(BreakBrickCollision)
    Super -> Game : registerToUpdate(Croucher)
    deactivate Super
    Fire -> Mario : addMarioState(Fire)
    Fire -> Game : registerToUpdate(FireBallThrower)
    deactivate Fire
else PowerUp es Star
    PowerUp -> Star : setState()
    activate Star
    Star -> Mario : addMarioState(Invincible)
    Star -> Mario : addEnemyCollision(InvincibleEnemyCollision)
    deactivate Star
else PowerUp es GreenMushroom
    PowerUp -> Mario : addLife()
end
deactivate Mario

PowerUp -> Game : unregisterToUpdate(this)
deactivate PowerUp
@enduml
