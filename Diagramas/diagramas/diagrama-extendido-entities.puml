@startuml
abstract class BaseEntity {
   #collider: Collider
   #graphicElement: GraphicElement
   +getCollider(): Collider 
   +getGraphicElement(): GraphicElement 
}

abstract class BaseUpdatableEntity {
   #loaded: boolean
   +load()
   +unload()
   +loaded(): boolean 
}

class Block {
   +Block()
}

interface Enemy {
   +getDamage()
   +getPoints(): int 
   +clone(): Entity 
   +update()
}

interface Entity {
   +getGraphicElement(): GraphicElement 
   +getCollider(): Collider 
}

class Goomba {
   -movingRight: boolean
   -int speedX = 1 // Velocidad horizontal
   +Goomba()
   +clone(): Entity 
   +getDamage()
   +getPoints(): int 
   +switchDirection()
   +update()
}

class KoopaTroopa {
   #movingRight: boolean
   #speedX: int
   +KoopaTroopa()
   +getDamage()
   +getPoints(): int 
   +clone(): Entity 
   +switchDirection()
   +update()
}

class Mario {
   #speedX: int
   #speedY: int
   #lifes: int
   #loaded: boolean
   #jumping: boolean
   #direction: Direction
   #gravity: float
   #jumpForce: int
   +Mario()
   +clone(): Entity 
   +getJumping(): boolean 
   +setJumping(j: boolean)
   +update()
   +land()
   #startJump()
   #handleVerticalMovement()
   #handleHorizontalMovement()
}

class Spiny {
   #movingRight: boolean
   #speedX: int
   +Spiny()
   +getDamage()
   +getPoints(): int 
   +clone(): Entity 
   +switchDirection()
   +update()
}

class SuperMushroom {
   #points: int
   #movingRight: boolean
   #speedX: int
   +SuperMushroom()
   +clone(): Entity 
   +switchDirection()
   +update()
}

interface UpdatableEntity {
   +update()
   +loaded(): boolean 
   +load()
   +unload()
}

@enduml
